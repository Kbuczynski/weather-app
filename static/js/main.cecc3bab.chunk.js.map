{"version":3,"sources":["components/WeatherItem.js","components/WeatherInfo.js","components/WeatherForm.js","components/ErrorMessage.js","App.js","index.js"],"names":["WeatherItem","props","city","deleteCity","name","id","temp","main","Button","variant","value","onClick","WeatherInfo","data","Table","striped","bordered","hover","map","index","key","WeatherForm","handleInput","cityName","addCity","sortByTemperature","sortByCity","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Form","inline","onSubmit","FormControl","type","required","autoFocus","placeholder","className","onChange","DropdownButton","title","Dropdown","Item","href","ErrorMessage","closeError","Alert","onClose","dismissible","Heading","API_KEY","App","e","target","setState","preventDefault","getData","cityId","parseInt","state","filter","getCoordinates","geolocation","navigator","addToData","getCurrentPosition","a","coords","latitude","longitude","API_URL","fetch","response","json","currentCityData","isRepeats","handleError","ok","cityData","cod","method","split","length","sort","b","tempA","tempB","comparison","cityA","toUpperCase","cityB","ascendingComparison","descendingComparison","element","error","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cecc3bab.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nconst WeatherItem = props => {\n    const { city, deleteCity } = props;\n\n    const { name, id } = city;\n    const { temp } = city.main;\n\n    return ( \n        <tr>\n          <td>{name}</td>\n          <td>{temp} â„ƒ</td>\n          <td><Button variant=\"danger\" value={id} onClick={deleteCity}>X</Button></td>\n        </tr>\n    );\n}\n \nexport default WeatherItem;","import React from 'react';\nimport WeatherItem from \"./WeatherItem\";\nimport { Table } from 'react-bootstrap';\n\nconst WeatherInfo = props => {\n  const { data, deleteCity } = props;\n\n  return ( \n    <Table striped bordered hover variant=\"dark\">\n      <thead>\n        <tr>\n          <th>City</th>\n          <th>Temperature</th>\n          <th>Delete</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          data.map((city, index) => {\n            return <WeatherItem key={index} city={city} deleteCity={deleteCity}/>\n          })\n        }\n      </tbody>\n    </Table>\n  );\n}\n \nexport default WeatherInfo;","import React from 'react';\nimport { Navbar, Form, FormControl, Button, DropdownButton, Dropdown } from 'react-bootstrap';\n\nconst WeatherForm = props => {\n  const { handleInput, cityName, addCity, sortByTemperature, sortByCity } = props;\n  \n  return ( \n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>Weather App</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Form inline onSubmit={addCity}>\n          <FormControl type=\"text\" required autoFocus placeholder=\"Enter city name\" className=\"mr-sm-2\" value={cityName} onChange={handleInput}/>\n          <Button variant=\"outline-light\" type=\"submit\" className=\"mr-sm-2\">Add</Button>\n        </Form>\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Sort by city\" variant=\"outline-light\" className=\"mr-sm-2\"> \n          <Dropdown.Item onClick={sortByCity} href=\"asc\">A-Z</Dropdown.Item>\n          <Dropdown.Item onClick={sortByCity} href=\"desc\">Z-A</Dropdown.Item>\n        </DropdownButton>\n\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Sort by temperature\" variant=\"outline-light\">\n          <Dropdown.Item onClick={sortByTemperature} href=\"asc\">Ascending</Dropdown.Item>\n          <Dropdown.Item onClick={sortByTemperature} href=\"desc\">Descending</Dropdown.Item>\n        </DropdownButton>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n \nexport default WeatherForm;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst ErrorMessage = props => {\n    const { closeError } = props;\n\n    return ( \n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n            <Alert.Heading>Something went wrong!</Alert.Heading>\n            <p>You probably made a typo or the city you are looking for is not in the database, please try again!</p>\n        </Alert>\n    );\n}\n \nexport default ErrorMessage;","import React, { Component } from 'react';\nimport WeatherInfo from './components/WeatherInfo';\nimport WeatherForm from './components/WeatherForm';\nimport ErrorMessage from \"./components/ErrorMessage\";\n\nconst API_KEY = 'bf8a723e43bdef32b04b4cf5071a3b77';\n\nclass App extends Component {\n\tconstructor(props) {\n    super(props);\n    \n\t\tthis.state = {\n      cityName: '',\n      data: [],\n      error: false\n    };\n  }\n\n\thandleInput = e => {\n    const cityName = e.target.value;\n    \n\t\tthis.setState({ cityName: cityName });\n  };\n\n\taddCity = e => {\n    e.preventDefault();\n\n    this.getData();\n    this.setState({ cityName: '' });\n  };\n\n  deleteCity = e => {\n    e.preventDefault();\n\n    const cityId = parseInt(e.target.value);\n\n    this.setState(state => {\n      const data = state.data.filter(data => data.id !== cityId);\n\n      return {\n        data\n      };\n    });\n  }\n\n  getCoordinates = () => {   \n    const { geolocation } = navigator;\n    const { addToData } = this;\n\n    if (geolocation) {\n        geolocation.getCurrentPosition(async ({coords}) => {\n          const { latitude, longitude } = coords;\n\n          const API_URL = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`;\n\n          const response = await fetch(API_URL);\n          const currentCityData = await response.json();\n\n          addToData(currentCityData);\n        });\n    }\n  }\n  \n  getData = async () => {\n    const { cityName } = this.state;\n    const { addToData, isRepeats, handleError, closeError } = this;\n    const API_URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`;\n      \n    const response = await fetch(API_URL);\n       \n    if (response.ok) {\n      const cityData = await response.json();\n  \n      if (isRepeats(cityData) && cityData.cod === 200) {\n        addToData(cityData);\n        closeError();\n      } else handleError();\n\n    } else handleError();\n  }\n\n  sortByTemperature = e => {\n    e.preventDefault();\n\n    const method = e.target.href.split(\"/\")[e.target.href.split(\"/\").length - 1];\n\n    this.setState(state => {\n      const data = state.data.sort((a, b) => {\n        const tempA = a.main.temp;\n        const tempB = b.main.temp;\n\n        return this.comparison(method, tempA, tempB);\n      });\n\n      return {\n        data\n      };\n    });\n  }\n\n  sortByCity = e => {\n    e.preventDefault();\n\n    const method = e.target.href.split(\"/\")[e.target.href.split(\"/\").length - 1];\n\n    this.setState(state => {\n      const data = state.data.sort((a, b) => {\n        const cityA = a.name.toUpperCase();\n        const cityB = b.name.toUpperCase();\n        \n        return this.comparison(method, cityA, cityB);\n      });\n\n      return {\n        data\n      };\n    });\n  }\n\n  comparison = (method, tempA, tempB) => {\n    let comparison = 0;\n\n    if (method === \"asc\")\n      comparison = this.ascendingComparison(tempA, tempB);\n    else if (method === \"desc\")\n      comparison = this.descendingComparison(tempA, tempB);\n\n    return comparison;\n  }\n\n  ascendingComparison = (a, b) => {\n    const itemA = a;\n    const itemB = b;\n\n    let comparison = 0;\n\n    if (itemA > itemB) comparison = 1;\n    else if (itemA < itemB) comparison = -1;\n\n    return comparison;\n  }\n\n  descendingComparison = (a, b) => {\n    const itemA = a;\n    const itemB = b;\n\n    let comparison = 0;\n\n    if (itemA > itemB) comparison = -1;\n    else if (itemA < itemB) comparison = 1;\n\n    return comparison;\n  }\n\n  addToData = city => {\n    this.setState(state => {\n      const data = [...state.data, city];\n      \n      return {\n        data\n      };\n    });\n  }\n\n  isRepeats = cityData => this.state.data.filter(element => element.name === cityData.name).length === 0;\n\n  handleError = () => this.setState({ error: true });\n\n  closeError = () => this.setState({ error: false });\n\n  componentDidMount() {\n    this.getCoordinates();\n  }\n\n\trender() {\n    const { cityName, data, error } = this.state;\n    const { handleInput, addCity, deleteCity, closeError, sortByTemperature, sortByCity } = this;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<WeatherForm handleInput={handleInput} cityName={cityName} addCity={addCity} sortByTemperature={sortByTemperature} sortByCity={sortByCity}/>\n        {error && <ErrorMessage closeError={closeError} />}\n\t\t\t\t<WeatherInfo data={data} deleteCity={deleteCity} />\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}